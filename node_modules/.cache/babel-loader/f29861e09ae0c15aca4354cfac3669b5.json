{"ast":null,"code":"var _jsxFileName = \"/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst loadContract = async () => {\n  try {\n    //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      // optional\n      cacheProvider: true,\n      // optional\n      providerOptions: {} // required\n\n    });\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n    const netId = await web3.eth.net.getId(); //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n\n    const contract = new web3.eth.Contract(Contract.abi, Contract.networks[netId].address); // GET THE AMOUNT OF NFTs MINTED\n\n    const totalSupply = await contract.methods.totalSupply().call();\n    console.log(`totalSupply ${totalSupply}`); //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n\n    /*\n    // THE TOKEN ID YOU WANT TO QUERY\n    const tokenID = 1;\n     // GET THE TOKEN URI\n    // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n    const uri = await contract.methods.tokenURI(tokenID).call();\n    console.log(\"uri: \", uri);\n     // GET THE OWNER OF A SPECIFIC TOKEN\n    const owner = await contract.methods.ownerOf(tokenID).call();\n    console.log(\"owner: \", owner);\n     // CHECK IF A SPECIFIC TOKEN IS SOLD\n    const sold = await contract.methods.sold(tokenID).call();\n    console.log(\"sold: \", sold);\n     // GET PRICE OF A SPECIFIC TOKEN\n    const price = await contract.methods.price(tokenID).call();\n    console.log(\"price: \", price);\n    // */\n  } catch (e) {\n    console.log(\"error = \", e);\n  }\n};\n\nconst Home = () => {\n  _s();\n\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    loadContract(); //  uncomment this to demostrate an NFT image url from ipfs\n\n    /*\n    (async () => {\n      try {\n        const YOUR_ID = \"\";\n        const { data: img } = await axios.get(\n          `https://ipfs.io/ipfs/${YOUR_ID}`\n        );\n        updatePath(img);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // */\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      textAlign: \"justify\",\n      width: \"500px\",\n      border: \"8px hotpink solid\",\n      boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n      borderRadius: \"20px\",\n      margin: \"100px auto\",\n      fontSize: \"20px\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NFT React Boilerplate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Once you have compiled and migrated the contract with Truffle you will able to talk to your contract using the commands in the loadContract function.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), \"If you try to load this page before migrating your contract / Or your wallet is on the wrong network, you will see an error in the console.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), imagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"pwqx+DLwaWLRUw6AtjD58Bq4kuI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx"],"names":["React","useEffect","useState","Web3","axios","Web3Modal","Contract","loadContract","web3Modal","network","cacheProvider","providerOptions","provider","connect","web3","netId","eth","net","getId","contract","abi","networks","address","totalSupply","methods","call","console","log","e","Home","imagePath","updatePath","display","flexDirection","textAlign","width","border","boxShadow","borderRadius","margin","fontSize","padding"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,QAAP,MAAqB,0BAArB;;;AAEA,MAAMC,YAAY,GAAG,YAAY;AAC/B,MAAI;AACF;AACA,UAAMC,SAAS,GAAG,IAAIH,SAAJ,CAAc;AAC9BI,MAAAA,OAAO,EAAE,SADqB;AACV;AACpBC,MAAAA,aAAa,EAAE,IAFe;AAET;AACrBC,MAAAA,eAAe,EAAE,EAHa,CAGT;;AAHS,KAAd,CAAlB;AAKA,UAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,OAAV,EAAvB;AACA,UAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASS,QAAT,CAAb;AACA,UAAMG,KAAK,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,KAAb,EAApB,CATE,CAUF;;AACA,UAAMC,QAAQ,GAAG,IAAIL,IAAI,CAACE,GAAL,CAASV,QAAb,CACfA,QAAQ,CAACc,GADM,EAEfd,QAAQ,CAACe,QAAT,CAAkBN,KAAlB,EAAyBO,OAFV,CAAjB,CAXE,CAgBF;;AACA,UAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiBD,WAAjB,GAA+BE,IAA/B,EAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAcJ,WAAY,EAAvC,EAlBE,CAoBF;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKG,GA1CD,CA0CE,OAAOK,CAAP,EAAU;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,CAAxB;AACD;AACF,CA9CD;;AAgDA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0B7B,QAAQ,CAAC,IAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,GADE,CAGd;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,sBACE;AACE,IAAA,KAAK,EAAE;AACLyB,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,aAAa,EAAE,QAFV;AAGLC,MAAAA,SAAS,EAAE,SAHN;AAILC,MAAAA,KAAK,EAAE,OAJF;AAKLC,MAAAA,MAAM,EAAE,mBALH;AAMLC,MAAAA,SAAS,EAAE,0BANN;AAOLC,MAAAA,YAAY,EAAE,MAPT;AAQLC,MAAAA,MAAM,EAAE,YARH;AASLC,MAAAA,QAAQ,EAAE,MATL;AAULC,MAAAA,OAAO,EAAE;AAVJ,KADT;AAAA,4BAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE;AAAA,uLAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,EAyBGX,SAAS,iBAAI;AAAK,MAAA,GAAG,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,YAzBhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAlDD;;GAAMD,I;;KAAAA,I;AAoDN,eAAeA,IAAf","sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\n\nconst loadContract = async () => {\n  try {\n    //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\", // optional\n      cacheProvider: true, // optional\n      providerOptions: {}, // required\n    });\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n    const netId = await web3.eth.net.getId();\n    //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n    const contract = new web3.eth.Contract(\n      Contract.abi,\n      Contract.networks[netId].address\n    );\n\n    // GET THE AMOUNT OF NFTs MINTED\n    const totalSupply = await contract.methods.totalSupply().call();\n    console.log(`totalSupply ${totalSupply}`);\n\n    //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n    /*\n    // THE TOKEN ID YOU WANT TO QUERY\n    const tokenID = 1;\n\n    // GET THE TOKEN URI\n    // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n    const uri = await contract.methods.tokenURI(tokenID).call();\n    console.log(\"uri: \", uri);\n\n    // GET THE OWNER OF A SPECIFIC TOKEN\n    const owner = await contract.methods.ownerOf(tokenID).call();\n    console.log(\"owner: \", owner);\n\n    // CHECK IF A SPECIFIC TOKEN IS SOLD\n    const sold = await contract.methods.sold(tokenID).call();\n    console.log(\"sold: \", sold);\n\n    // GET PRICE OF A SPECIFIC TOKEN\n    const price = await contract.methods.price(tokenID).call();\n    console.log(\"price: \", price);\n    // */\n  } catch (e) {\n    console.log(\"error = \", e);\n  }\n};\n\nconst Home = () => {\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    loadContract();\n\n    //  uncomment this to demostrate an NFT image url from ipfs\n    /*\n    (async () => {\n      try {\n        const YOUR_ID = \"\";\n        const { data: img } = await axios.get(\n          `https://ipfs.io/ipfs/${YOUR_ID}`\n        );\n        updatePath(img);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // */\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"justify\",\n        width: \"500px\",\n        border: \"8px hotpink solid\",\n        boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n        borderRadius: \"20px\",\n        margin: \"100px auto\",\n        fontSize: \"20px\",\n        padding: \"20px\",\n      }}\n    >\n      <p>NFT React Boilerplate</p>\n      <p>\n        Once you have compiled and migrated the contract with Truffle you will\n        able to talk to your contract using the commands in the loadContract\n        function.\n        <br />\n        <br />\n        <br />\n        If you try to load this page before migrating your contract / Or your\n        wallet is on the wrong network, you will see an error in the console.\n      </p>\n      {imagePath && <img src={imagePath} />}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}