{"ast":null,"code":"var _jsxFileName = \"/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [owner, setOwner] = useState(null);\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    const loadContract = async () => {\n      try {\n        //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n        const web3Modal = new Web3Modal({\n          network: \"mainnet\",\n          // optional\n          cacheProvider: true,\n          // optional\n          providerOptions: {} // required\n        });\n        const provider = await web3Modal.connect();\n        const web3 = new Web3(provider);\n        const netId = await web3.eth.net.getId();\n        //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n        const contract = new web3.eth.Contract(Contract.abi, Contract.networks[netId].address);\n\n        // GET THE AMOUNT OF NFTs MINTED\n        const totalSupply = await contract.methods.totalSupply().call();\n        console.log(`totalSupply ${totalSupply}`);\n\n        //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n\n        // THE TOKEN ID YOU WANT TO QUERY\n        const tokenID = 2;\n\n        // GET THE TOKEN URI\n        // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n        const uri = await contract.methods.tokenURI(tokenID).call();\n        console.log(\"uri: \", uri);\n\n        // GET THE OWNER OF A SPECIFIC TOKEN\n        const owner = await contract.methods.ownerOf(tokenID).call();\n        console.log(\"owner: \", owner);\n        setOwner(owner);\n        // CHECK IF A SPECIFIC TOKEN IS SOLD\n        const sold = await contract.methods.sold(tokenID).call();\n        console.log(\"sold: \", sold);\n\n        // GET PRICE OF A SPECIFIC TOKEN\n        const price = await contract.methods.price(tokenID).call();\n        console.log(\"price: \", price);\n        // \n      } catch (e) {\n        console.log(\"error = \", e);\n      }\n    };\n    loadContract();\n\n    //  uncomment this to demostrate an NFT image url from ipfs\n\n    (async () => {\n      try {\n        const YOUR_ID = \"QmdF2LgSRbm8jYAidRiK41aBUmb7t1M1Xam3woyUVGGeAU\";\n        updatePath(`https://ipfs.io/ipfs/${YOUR_ID}`);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // \n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      textAlign: \"justify\",\n      width: \"500px\",\n      border: \"8px blue solid\",\n      boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n      borderRadius: \"20px\",\n      margin: \"100px auto\",\n      fontSize: \"20px\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NFT React Master IoT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Crear un NFT en un blockchain local Ganache\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), \"En la Consola se pueden ver los valores luego de Mint un NFT. Por ejemplo la imagen de la UCM:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: owner && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Propietario del token: \", owner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), imagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ziVS62M5ovnzRlsvE4UMfW82oH0=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","Web3","axios","Web3Modal","Contract","jsxDEV","_jsxDEV","Home","_s","owner","setOwner","imagePath","updatePath","loadContract","web3Modal","network","cacheProvider","providerOptions","provider","connect","web3","netId","eth","net","getId","contract","abi","networks","address","totalSupply","methods","call","console","log","tokenID","uri","tokenURI","ownerOf","sold","price","e","YOUR_ID","style","display","flexDirection","textAlign","width","border","boxShadow","borderRadius","margin","fontSize","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx"],"sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\n\n\nconst Home = () => {\n  const [owner, setOwner] = useState(null);\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    const loadContract = async () => {\n      try {\n        //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n        const web3Modal = new Web3Modal({\n          network: \"mainnet\", // optional\n          cacheProvider: true, // optional\n          providerOptions: {}, // required\n        });\n        const provider = await web3Modal.connect();\n        const web3 = new Web3(provider);\n        const netId = await web3.eth.net.getId();\n        //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n        const contract = new web3.eth.Contract(\n          Contract.abi,\n          Contract.networks[netId].address\n        );\n    \n        // GET THE AMOUNT OF NFTs MINTED\n        const totalSupply = await contract.methods.totalSupply().call();\n        console.log(`totalSupply ${totalSupply}`);\n    \n        //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n        \n        // THE TOKEN ID YOU WANT TO QUERY\n        const tokenID = 2;\n    \n        // GET THE TOKEN URI\n        // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n        const uri = await contract.methods.tokenURI(tokenID).call();\n        console.log(\"uri: \", uri);\n    \n        // GET THE OWNER OF A SPECIFIC TOKEN\n        const owner = await contract.methods.ownerOf(tokenID).call();\n        console.log(\"owner: \", owner);\n        setOwner(owner);\n        // CHECK IF A SPECIFIC TOKEN IS SOLD\n        const sold = await contract.methods.sold(tokenID).call();\n        console.log(\"sold: \", sold);\n    \n        // GET PRICE OF A SPECIFIC TOKEN\n        const price = await contract.methods.price(tokenID).call();\n        console.log(\"price: \", price);\n        // \n      } catch (e) {\n        console.log(\"error = \", e);\n      }\n    };\n    loadContract();\n\n    //  uncomment this to demostrate an NFT image url from ipfs\n   \n    (async () => {\n      try {\n        const YOUR_ID = \"QmdF2LgSRbm8jYAidRiK41aBUmb7t1M1Xam3woyUVGGeAU\";\n        updatePath(`https://ipfs.io/ipfs/${YOUR_ID}`);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // \n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"justify\",\n        width: \"500px\",\n        border: \"8px blue solid\",\n        boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n        borderRadius: \"20px\",\n        margin: \"100px auto\",\n        fontSize: \"20px\",\n        padding: \"20px\",\n      }}\n    >\n      <p>NFT React Master IoT</p>\n      <p>\n        Crear un NFT en un blockchain local Ganache\n        <br />\n        <br />\n        <br />\n        En la Consola se pueden ver los valores luego de Mint un NFT. \n        Por ejemplo la imagen de la UCM:\n      </p>\n      <div>\n      {/* El resto de tu interfaz de usuario */}\n      {owner && <p>Propietario del token: {owner}</p>}\n    </div>\n      {imagePath && <img src={imagePath} />}\n    </div>\n  );\n};\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}