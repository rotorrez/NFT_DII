{"ast":null,"code":"var _jsxFileName = \"/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [owner, setOwner] = useState(null);\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    loadContract();\n\n    //  uncomment this to demostrate an NFT image url from ipfs\n\n    (async () => {\n      try {\n        const YOUR_ID = \"QmdF2LgSRbm8jYAidRiK41aBUmb7t1M1Xam3woyUVGGeAU\";\n        updatePath(`https://ipfs.io/ipfs/${YOUR_ID}`);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // \n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      textAlign: \"justify\",\n      width: \"500px\",\n      border: \"8px blue solid\",\n      boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n      borderRadius: \"20px\",\n      margin: \"100px auto\",\n      fontSize: \"20px\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NFT React Master IoT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Crear un NFT en un blockchain local Ganache\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \"En la Consola se pueden ver los valores luego de Mint un NFT. Por ejemplo la imagen de la UCM:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: owner && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Propietario del token: \", owner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), imagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ziVS62M5ovnzRlsvE4UMfW82oH0=\");\n_c = Home;\nconst loadContract = async () => {\n  try {\n    //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      // optional\n      cacheProvider: true,\n      // optional\n      providerOptions: {} // required\n    });\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n    const netId = await web3.eth.net.getId();\n    //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n    const contract = new web3.eth.Contract(Contract.abi, Contract.networks[netId].address);\n\n    // GET THE AMOUNT OF NFTs MINTED\n    const totalSupply = await contract.methods.totalSupply().call();\n    console.log(`totalSupply ${totalSupply}`);\n\n    //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n\n    // THE TOKEN ID YOU WANT TO QUERY\n    const tokenID = 2;\n\n    // GET THE TOKEN URI\n    // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n    const uri = await contract.methods.tokenURI(tokenID).call();\n    console.log(\"uri: \", uri);\n\n    // GET THE OWNER OF A SPECIFIC TOKEN\n    const owner = await contract.methods.ownerOf(tokenID).call();\n    console.log(\"owner: \", owner);\n    setOwner(owner);\n    // CHECK IF A SPECIFIC TOKEN IS SOLD\n    const sold = await contract.methods.sold(tokenID).call();\n    console.log(\"sold: \", sold);\n\n    // GET PRICE OF A SPECIFIC TOKEN\n    const price = await contract.methods.price(tokenID).call();\n    console.log(\"price: \", price);\n    // \n  } catch (e) {\n    console.log(\"error = \", e);\n  }\n};\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","Web3","axios","Web3Modal","Contract","jsxDEV","_jsxDEV","Home","_s","owner","setOwner","imagePath","updatePath","loadContract","YOUR_ID","e","console","log","style","display","flexDirection","textAlign","width","border","boxShadow","borderRadius","margin","fontSize","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","web3Modal","network","cacheProvider","providerOptions","provider","connect","web3","netId","eth","net","getId","contract","abi","networks","address","totalSupply","methods","call","tokenID","uri","tokenURI","ownerOf","sold","price","$RefreshReg$"],"sources":["/home/rtorrez/Documentos/personal/ntf/NFT_DII/src/pages/home.jsx"],"sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport Web3Modal from \"web3modal\";\nimport Contract from \"../truffle/abis/NFT.json\";\n\n\nconst Home = () => {\n  const [owner, setOwner] = useState(null);\n  const [imagePath, updatePath] = useState(null);\n  useEffect(() => {\n    loadContract();\n\n    //  uncomment this to demostrate an NFT image url from ipfs\n   \n    (async () => {\n      try {\n        const YOUR_ID = \"QmdF2LgSRbm8jYAidRiK41aBUmb7t1M1Xam3woyUVGGeAU\";\n        updatePath(`https://ipfs.io/ipfs/${YOUR_ID}`);\n      } catch (e) {\n        console.log(\"swallow error\");\n      }\n    })();\n    // \n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"justify\",\n        width: \"500px\",\n        border: \"8px blue solid\",\n        boxShadow: \"0 0 12px rgba(0,0,0,0.5)\",\n        borderRadius: \"20px\",\n        margin: \"100px auto\",\n        fontSize: \"20px\",\n        padding: \"20px\",\n      }}\n    >\n      <p>NFT React Master IoT</p>\n      <p>\n        Crear un NFT en un blockchain local Ganache\n        <br />\n        <br />\n        <br />\n        En la Consola se pueden ver los valores luego de Mint un NFT. \n        Por ejemplo la imagen de la UCM:\n      </p>\n      <div>\n      {/* El resto de tu interfaz de usuario */}\n      {owner && <p>Propietario del token: {owner}</p>}\n    </div>\n      {imagePath && <img src={imagePath} />}\n    </div>\n  );\n};\nconst loadContract = async () => {\n  try {\n    //THIS ALLOWS YOU TALK TO BLOCKCHAIN\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\", // optional\n      cacheProvider: true, // optional\n      providerOptions: {}, // required\n    });\n    const provider = await web3Modal.connect();\n    const web3 = new Web3(provider);\n    const netId = await web3.eth.net.getId();\n    //THIS WILL LOAD YOUR CONTRACT FROM BLOCKCHAIN\n    const contract = new web3.eth.Contract(\n      Contract.abi,\n      Contract.networks[netId].address\n    );\n\n    // GET THE AMOUNT OF NFTs MINTED\n    const totalSupply = await contract.methods.totalSupply().call();\n    console.log(`totalSupply ${totalSupply}`);\n\n    //  UNCOMMENT THIS BLOCK ONCE YOU HAVE MINTED AN NFT\n    \n    // THE TOKEN ID YOU WANT TO QUERY\n    const tokenID = 2;\n\n    // GET THE TOKEN URI\n    // THE URI IS THE LINK TO WHERE YOUR JSON DATA LIVES\n    const uri = await contract.methods.tokenURI(tokenID).call();\n    console.log(\"uri: \", uri);\n\n    // GET THE OWNER OF A SPECIFIC TOKEN\n    const owner = await contract.methods.ownerOf(tokenID).call();\n    console.log(\"owner: \", owner);\n    setOwner(owner);\n    // CHECK IF A SPECIFIC TOKEN IS SOLD\n    const sold = await contract.methods.sold(tokenID).call();\n    console.log(\"sold: \", sold);\n\n    // GET PRICE OF A SPECIFIC TOKEN\n    const price = await contract.methods.price(tokenID).call();\n    console.log(\"price: \", price);\n    // \n  } catch (e) {\n    console.log(\"error = \", e);\n  }\n};\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}